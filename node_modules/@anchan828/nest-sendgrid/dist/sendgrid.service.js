"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendGridService = void 0;
const common_1 = require("@nestjs/common");
const mail_1 = require("@sendgrid/mail");
const deepmerge = require("deepmerge");
const sendgrid_constants_1 = require("./sendgrid.constants");
const sendgrid_logger_1 = require("./sendgrid.logger");
let SendGridService = class SendGridService {
    constructor(options, mailService) {
        this.options = options;
        this.mailService = mailService;
        if (!(options && options.apikey)) {
            sendgrid_logger_1.logger.error("options not found. Did you use SendGridModule.forRoot?");
            return;
        }
        this.mailService.setApiKey(options.apikey);
        sendgrid_logger_1.logger.log("Set API Key");
        if (options.substitutionWrappers && options.substitutionWrappers.left && options.substitutionWrappers.right) {
            this.mailService.setSubstitutionWrappers(options.substitutionWrappers.left, options.substitutionWrappers.right);
            sendgrid_logger_1.logger.log("Set Substitution Wrappers");
        }
    }
    async send(data, isMultiple, cb) {
        if (Array.isArray(data)) {
            return this.mailService.send(data.map((d) => this.mergeWithDefaultMailData(d)), isMultiple, cb);
        }
        else {
            return this.mailService.send(this.mergeWithDefaultMailData(data), isMultiple, cb);
        }
    }
    async sendMultiple(data, cb) {
        return this.mailService.sendMultiple(this.mergeWithDefaultMailData(data), cb);
    }
    mergeWithDefaultMailData(data) {
        if (!this.options.defaultMailData) {
            return data;
        }
        return deepmerge(this.options.defaultMailData, data);
    }
};
exports.SendGridService = SendGridService;
exports.SendGridService = SendGridService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Inject)(sendgrid_constants_1.SendGridConstants.SENDGRID_MODULE_OPTIONS)),
    __metadata("design:paramtypes", [Object, mail_1.MailService])
], SendGridService);
